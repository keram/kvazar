	// var kQuiz = {	// 		// 	// 	kQuiz: function () { return this; }	// 		// };		var kQuiz = function(config) {	var kQuiz = { 						updateSnippet : function (id, html) {				$("#" + id).html(html);			},			submitCallback : function (response) {				kQuiz.form_submitted = true;								return true;			}, // End of callback						submit : function () {				var sendValues = {};				var values = $(kQuiz.form).serializeArray();				// todo lepsi selektor cez childs formu				$('#qform :input').attr('disabled', true);								for (var i = 0; i < values.length; i++) {					var name = values[i].name;					// multi					if (name in sendValues) {						var val = sendValues[name];						if (!(val instanceof Array)) {							val = [val];						}						val.push(values[i].value);						sendValues[name] = val;					} else {						sendValues[name] = values[i].value;					}				}				jQuery.ajax({					url: $(kQuiz.form).attr("action"),					data: sendValues,					type: $(kQuiz.form).attr("method"),					success: kQuiz.submitCallback				});								return true;			}, // End of processAnswer			quizCountDown : function () {				var elm = $("#quiz-countdown"); // todo toto je blbost na entu				var timerValue = parseInt(elm.html());				if ( timerValue != 0  && !isNaN(timerValue)) {					elm.html(timerValue - 1)				} else {					clearInterval(kQuiz.cdi); // Queiz CountDownInterval					$.getJSON(kQuiz.url, null, kQuiz.initData);				}				return true;			}, // End of countDown						questionCountDown : function () {				var elm = $("#question-countdown"); // todo toto je blbost na entu				var timerValue = parseInt(elm.html());								if ( timerValue != 0  && !isNaN(timerValue)) {					elm.html(timerValue - 1)				} else {					clearInterval(kQuiz.qcdi); // questionCountDownInterval				}								return true;			}, // End of countDown												initData : function (response) {				if (response.snippets) {					for (var i in response.snippets ) {						kQuiz.updateSnippet(i, response.snippets[i]);					}		 		}				if ( response.quiz ) 				{					var q = response.quiz;					if ( q.run == 1 )					{						if ( typeof(kQuiz.run) != "undefined" || kQuiz.run == 0 ) {														kQuiz.run = 1;						} else {							if ( response.question ) {								clearInterval(kQuiz.questionTimerInterval);								kQuiz.init_question(response.question);							}						}					} else if ( q.time < 300 ) {						$("#quiz-countdown").html(q.time);						kQuiz.cdi = setInterval(kQuiz.quizCountDown, 1000);						clearInterval(kQuiz.quizUpdater);					}				}				return true;			}, // End of initData						update : function () {				clearInterval(kQuiz.hintInterval);				if ( !kQuiz.form_submitted ) 				{					if ( kQuiz.question.type == "multi" )					{						if ( $("#qform :input:checkbox:checked").length != 0 )						{							kQuiz.submit();						}					}				}								kQuiz.getAnswer();			},			bindHint : function (response) {				if (response.hint) {					if ( kQuiz.question.type == "multi" )					{						var elms = $("#frmqform-answer"+response.hint);						elms.parent().addClass("invalid");						// $("#frmqform-answer"+response.hint).attr('disabled', true);					}					else 					{					}										// fix pre nadbytocny request sposobeny zaokruhlenim nadol pre rychlejsie vykonanie hintu					if ( !response.hints ) {						clearInterval(kQuiz.hintInterval);					}				}				return true;			}, // End of bindHint			getHint : function () {				$.getJSON(kQuiz.hint_url + kQuiz.question.id, null, kQuiz.bindHint);				return true;			}, // End of getHint			initAnswer : function (response) {				if (response.answer) {					if ( kQuiz.question.type == "multi" )					{						// TODO nejaky lepsi selektor na moznosti, ( podla classy? )						var answers = response.answer;						var elms = $("#qform :input:checkbox");						var correct_elms = [];												for ( var i = 0; i < answers.length; i++ ) {							correct_elms[correct_elms.length] = $("#frmqform-answer"+answers[i]).get(0);							// correct_elms[correct_elms.length].parent().addClass("correct");						}						for ( var i = 0; i < elms.length; i++ ) {							if ( correct_elms.indexOf(elms[i]) != -1 ) {								$(elms[i]).parent().addClass("correct");								if ( elms[i].checked ) {									$(elms[i]).parent().addClass("valid-checked");								}							} else {								$(elms[i]).parent().addClass("invalid");								if ( elms[i].checked ) {									$(elms[i]).parent().addClass("invalid-checked");								}							}						}																	}					else 					{					}				}				setTimeout(function() { $.getJSON(kQuiz.url, null, kQuiz.initData); } , 5000);								return true;			}, // End of initAnswer			getAnswer : function () {				$.getJSON(kQuiz.answer_url + kQuiz.question.id, null, kQuiz.initAnswer);				return true;			}, // End of getAnswer						init_question : function (question) {				kQuiz.question = question;				kQuiz.form_submitted = false;								if ( !kQuiz.questionTimer ) {					kQuiz.questionTimer = $("#question-timer").get(0);				} else {					kQuiz.questionTimer.innerHTML = kQuiz.question.time;					kQuiz.questionTimerInterval = setInterval(kQuiz.countDown, 1000);				}								//  sekundu pred koncom submitnem a pockam na odpovede ( pre istotu aby bola odpoved uzivatela odoslana) 				// kQuiz.questionUpdateTimeout = setTimeout(kQuiz.questionUpdate, (kQuiz.question.time * 1000) - 1000);				kQuiz.questionUpdateTimeout = setTimeout(kQuiz.questionUpdate, (kQuiz.question.time * 1000) - 5000);				if ( kQuiz.question.hints != 0) {					var hp = Math.round(( kQuiz.question.time / 100 ) * ( 100 / ( kQuiz.question.hints + 1 ) ));					kQuiz.hintInterval = setInterval(kQuiz.getHint, hp * 1000);				}			},				init : function(config) {				this.url = ( config.url ) ? config.url : null;				this.hint_url = ( config.hint_url ) ? config.hint_url : null;				this.answer_url = ( config.answer_url ) ? config.answer_url : null;				if ( config.question ) 				{					this.init_question(config.question);				}				else				{					// kviz nebezi, pridam observer kazdych 5 sekund na spustenie kvizu					this.quizUpdater = setInterval(function() { $.getJSON(kQuiz.url, null, kQuiz.initData); } , 60000);					$.getJSON(kQuiz.url, null, kQuiz.initData);				}			}		};			kQuiz.init(config);		return kQuiz;	};$(function () {	if ( typeof(quiz_config) != "undefined" ) {		var myQuiz = new kQuiz(quiz_config);	}				// kazdych 30 sekund updatnem pocet prihlasenych ludi	if ($("#logged-users")) {		var refreshId = setInterval(function()		{			$.get('/?do=loggedUsers');		}, 60000);	}});